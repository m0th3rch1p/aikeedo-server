{% extends "/layouts/main.twig" %}

{% set wide_layout = true %}
{% set active_menu = 'writer' %}
{% set xdata = "ai(" ~ (preset is defined ? "'#{preset.id}'" : '') ~ ")" %}

{% block title (preset is defined ? preset.title : p__('title', 'AI Writer'))|title %}

{% block template %}

{% embed "/sections/page-header.twig" with {  back: 'app' } %}

{% block title preset is defined ? preset.title : p__('title', 'AI Writer') %}
{% block desc preset is defined ? preset.description : __('AI Writer is a tool that helps you write better content faster. It uses the power of AI to generate content for you.') %}

{% block badge %}
<span
  title="{{ auth_user.token_credit is not defined or auth_user.token_credit ==  null ? __('Unlimited tokens') : __('%s tokens', auth_user.token_credit) }}"
  class="items-center hidden gap-1 px-2 py-1 text-sm rounded-lg md:inline-flex bg-intermediate text-intermediate-content">
  <i class="text-base ti ti-square-rounded-letter-t"></i>

  {% if auth_user.token_credit is not defined or auth_user.token_credit ==  null %}
  {{ __('Unlimited tokens remaining') }}
  {% else %}
  {% set tokens %}
  <strong
    x-text="Intl.NumberFormat(document.documentElement.lang, { notation: 'compact' }).format('{{ auth_user.token_credit }}')"></strong>
  {% endset %}
  {{ __('%s tokens remaining', tokens)|raw }}
  {% endif %}
</span>

{% if auth_user.token_credit is defined and auth_user.token_credit !=  null %}
<span
  class="inline-flex items-center gap-1 text-sm text-content-dimmed md:hidden">
  <i class="text-base ti ti-square-rounded-letter-t"></i>

  <span
    x-text="Intl.NumberFormat(document.documentElement.lang, { notation: 'compact' }).format('{{ auth_user.token_credit }}')"></span>
</span>
{% endif %}
{% endblock %}

{% endembed %}

<div class="flex flex-col gap-4 mt-4 md:items-start md:flex-row">
  <section class="md:sticky md:top-4 md:w-96 box md:shrink-0">
    <h2>{{ p__('heading', 'Prompts') }}</h2>

    <form class="grid grid-cols-1 gap-6 mt-4"
      @submit.prevent="submit('/text-generator/{{ preset.id ?? ""  }}')"
      x-ref="form">
      {% for p in placeholders %}
      {% set id = "i#{random()}" %}

      {% if p.type.value is defined and p.type.value == 'text' %}
      <div>
        <label for="{{ id }}">
          {{ p.label }}

          {% if p.info %}
          <i class="ti ti-help-square-rounded-filled help" title="{{ p.info }}"
            data-tooltip></i>
          {% endif %}
        </label>

        {% if p.multiline %}
        <textarea cols="5" id="{{ id }}" name="{{ p.name }}"
          placeholder="{{ p.placeholder }}" class="mt-2 input"
          autocomplete="off" rows="3"
          {{ p.required ? 'required' : '' }}>{{ p.value }}</textarea>
        {% else %}
        <input type="text" id="{{ id }}" name="{{ p.name }}"
          placeholder="{{ p.placeholder }}" class="mt-2 input"
          autocomplete="off" rows="3" value="{{ p.value }}"
          {{ p.required ? 'required' : '' }}>
        {% endif %}
      </div>
      {% endif %}

      {% if p.type.value is defined and p.type.value == 'enum' %}
      <div>
        <label for="{{ id }}">
          {{ p.label }}

          {% if p.info %}
          <i class="ti ti-help-square-rounded-filled help" title="{{ p.info }}"
            data-tooltip></i>
          {% endif %}
        </label>

        <select id="{{ id }}" name="{{ p.name }}" class="mt-2 input"
          {{ p.required ? 'required' : '' }}>
          {% for o in p.options %}
          <option value="{{ o.value }}"
            {{ o.value == p.value ? 'seleected' : '' }}>{{ o.label }}</option>
          {% endfor %}
        </select>
      </div>
      {% endif %}

      {% if p.type == 'language' %}
      <div>
        <label for="language">
          {{ p__('label', 'Language') }}
        </label>

        <select id="language" name="language" class="mt-2 input">
          {% set languages = ["Albanian (Shqip)", "Arabic (العربية)", "Armenian (Հայերեն)", "Awadhi (अवधी)", "Azerbaijani (Azərbaycanca)", "Bashkir (Башҡорт)", "Basque (Euskara)", "Belarusian (Беларуская)", "Bengali (বাংলা)", "Bhojpuri (भोजपुरी)", "Bosnian (Bosanski)", "Brazilian Portugu (português brasileiro)", "Bulgarian (български)", "Cantonese (Yue) (粵語)", "Catalan (Català)", "Chhattisgarhi (छत्तीसगढ़ी)", "Chinese (中文)", "Croatian (Hrvatski)", "Czech (Čeština)", "Danish (Dansk)", "Dogri (डोगरी)", "Dutch (Nederlands)", "English", "Estonian (Eesti)", "Faroese (Føroyskt)", "Finnish (Suomi)", "French (Français)", "Galician (Galego)", "Georgian (ქართული)", "German (Deutsch)", "Greek (Ελληνικά)", "Gujarati (ગુજરાતી)", "Haryanvi (हरियाणवी)", "Hindi (हिंदी)", "Hungarian (Magyar)", "Indonesian (Bahasa Indonesia)", "Irish (Gaeilge)", "Italian (Italiano)", "Japanese (日本語)", "Javanese (Basa Jawa)", "Kannada (ಕನ್ನಡ)", "Kashmiri (कश्मीरी)", "Kazakh (Қазақша)", "Konkani (कोंकणी)", "Korean (한국어)", "Kyrgyz (Кыргызча)", "Latvian (Latviešu)", "Lithuanian (Lietuvių)", "Macedonian (Македонски)", "Maithili (मैथिली)", "Malay (Bahasa Melayu)", "Maltese (Malti)", "Mandarin (普通话)", "Mandarin Chinese (中文)", "Marathi (मराठी)", "Marwari (मारवाड़ी)", "Min Nan (閩南語)", "Moldovan (Moldovenească)", "Mongolian (Монгол)", "Montenegrin (Crnogorski)", "Nepali (नेपाली)", "Norwegian (Norsk)", "Oriya (ଓଡ଼ିଆ)", "Pashto (پښتو)", "Persian (Farsi) (فارسی)", "Polish (Polski)", "Portuguese (Português)", "Punjabi (ਪੰਜਾਬੀ)", "Rajasthani (राजस्थानी)", "Romanian (Română)", "Russian (Русский)", "Sanskrit (संस्कृतम्)", "Santali (संताली)", "Serbian (Српски)", "Sindhi (سنڌي)", "Sinhala (සිංහල)", "Slovak (Slovenčina)", "Slovene (Slovenščina)", "Slovenian (Slovenščina)", "Spanish (Español)", "Turkish (Türkçe)", "Ukrainian (Українська)", "Urdu (اردو)", "Uzbek (Ўзбек)", "Vietnamese (Việt Nam)", "Welsh (Cymraeg)", "Wu (吴语)" ] %}
          {% for language in languages %}
          <option value="{{ language }}"
            {{ language == 'English' ? 'selected' : '' }}>{{ language }}
          </option>
          {% endfor %}
        </select>
      </div>
      {% endif %}

      {% if p.type == 'tone' %}
      <div>
        <label for="tone">
          {{ p__('label', 'Tone of voice') }}
        </label>

        <div class="flex flex-wrap items-center gap-2 mt-2">
          {% set tones = ['Professional', 'Funny', 'Casual', 'Excited', 'Witty', 'Sarcastic', 'Dramatic', 'Feminine', 'Masculine', 'Grumpy', 'Bold', 'Secretive'] %}

          {% for tone in tones %}
          <label>
            <input type="radio" name="tone" value="{{ tone }}"
              class="radio-button" />

            <span>{{ tone }}</span>
          </label>
          {% endfor %}
        </div>
      </div>
      {% endif %}
      {% endfor %}

      <div>
        <label for="temperature">
          {{ p__('label', 'Creativity') }}
        </label>

        <div class="flex flex-wrap items-center gap-2 mt-2">
          {% set levels = {
            "0.0": "Minimal",
            "0.1": "Subtle",
            "0.2": "Basic",
            "0.3": "Modest",
            "0.4": "Adequate",
            "0.5": "Balanced",
            "0.6": "Intermediate",
            "0.7": "Enriched",
            "0.8": "Expressive",
            "0.9": "Imaginative",
            "1.0": "Creative",
            "1.1": "Innovative",
            "1.2": "Inspired",
            "1.3": "Visionary",
            "1.4": "Inventive",
            "1.5": "Pioneering",
            "1.6": "Artistic",
            "1.7": "Radical",
            "1.8": "Genius",
            "1.9": "Transcendent",
            "2.0": "Boundless",
          } %}

          {% for level, label in levels %}
          <label>
            <input type="radio" name="temperature" value="{{ level }}"
              class="radio-button" />

            <span>
              {{ label }}
            </span>
          </label>
          {% endfor %}
        </div>
      </div>

      <div>
        <button type="submit" class="w-full button" :disabled="!isSubmitable"
          :processing="isProcessing">

          <svg width="24" height="24" viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg" class="spinner">
            <style>
              .spinner_S1WN {
                animation: spinner_MGfb .8s linear infinite;
                animation-delay: -.8s
              }

              .spinner_Km9P {
                animation-delay: -.65s
              }

              .spinner_JApP {
                animation-delay: -.5s
              }

              @keyframes spinner_MGfb {

                93.75%,
                100% {
                  opacity: .2
                }
              }
            </style>
            <circle class="spinner_S1WN" cx="4" cy="12" r="3" />
            <circle class="spinner_S1WN spinner_Km9P" cx="12" cy="12" r="3" />
            <circle class="spinner_S1WN spinner_JApP" cx="20" cy="12" r="3" />
          </svg>

          <span class="inline-flex items-center gap-1" x-show="!isProcessing">
            <i class="ti ti-sparkles"></i>

            {{ p__('button', 'Generate Result') }}
          </span>
        </button>
      </div>
    </form>
  </section>

  <div class="flex flex-col gap-4 md:grow" x-cloak>
    {% include "sections/ai-result.twig" %}
  </div>
</div>
{% endblock %}